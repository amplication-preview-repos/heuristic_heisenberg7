/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SkillService } from "../skill.service";
import { SkillCreateInput } from "./SkillCreateInput";
import { Skill } from "./Skill";
import { SkillFindManyArgs } from "./SkillFindManyArgs";
import { SkillWhereUniqueInput } from "./SkillWhereUniqueInput";
import { SkillUpdateInput } from "./SkillUpdateInput";
import { UserSkillFindManyArgs } from "../../userSkill/base/UserSkillFindManyArgs";
import { UserSkill } from "../../userSkill/base/UserSkill";
import { UserSkillWhereUniqueInput } from "../../userSkill/base/UserSkillWhereUniqueInput";

export class SkillControllerBase {
  constructor(protected readonly service: SkillService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Skill })
  async createSkill(@common.Body() data: SkillCreateInput): Promise<Skill> {
    return await this.service.createSkill({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Skill] })
  @ApiNestedQuery(SkillFindManyArgs)
  async skills(@common.Req() request: Request): Promise<Skill[]> {
    const args = plainToClass(SkillFindManyArgs, request.query);
    return this.service.skills({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Skill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async skill(
    @common.Param() params: SkillWhereUniqueInput
  ): Promise<Skill | null> {
    const result = await this.service.skill({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Skill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSkill(
    @common.Param() params: SkillWhereUniqueInput,
    @common.Body() data: SkillUpdateInput
  ): Promise<Skill | null> {
    try {
      return await this.service.updateSkill({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Skill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSkill(
    @common.Param() params: SkillWhereUniqueInput
  ): Promise<Skill | null> {
    try {
      return await this.service.deleteSkill({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/userSkills")
  @ApiNestedQuery(UserSkillFindManyArgs)
  async findUserSkills(
    @common.Req() request: Request,
    @common.Param() params: SkillWhereUniqueInput
  ): Promise<UserSkill[]> {
    const query = plainToClass(UserSkillFindManyArgs, request.query);
    const results = await this.service.findUserSkills(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        grade: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        skill: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userSkills")
  async connectUserSkills(
    @common.Param() params: SkillWhereUniqueInput,
    @common.Body() body: UserSkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userSkills: {
        connect: body,
      },
    };
    await this.service.updateSkill({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userSkills")
  async updateUserSkills(
    @common.Param() params: SkillWhereUniqueInput,
    @common.Body() body: UserSkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userSkills: {
        set: body,
      },
    };
    await this.service.updateSkill({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userSkills")
  async disconnectUserSkills(
    @common.Param() params: SkillWhereUniqueInput,
    @common.Body() body: UserSkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userSkills: {
        disconnect: body,
      },
    };
    await this.service.updateSkill({
      where: params,
      data,
      select: { id: true },
    });
  }
}
