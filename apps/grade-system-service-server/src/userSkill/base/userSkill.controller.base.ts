/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserSkillService } from "../userSkill.service";
import { UserSkillCreateInput } from "./UserSkillCreateInput";
import { UserSkill } from "./UserSkill";
import { UserSkillFindManyArgs } from "./UserSkillFindManyArgs";
import { UserSkillWhereUniqueInput } from "./UserSkillWhereUniqueInput";
import { UserSkillUpdateInput } from "./UserSkillUpdateInput";

export class UserSkillControllerBase {
  constructor(protected readonly service: UserSkillService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserSkill })
  async createUserSkill(
    @common.Body() data: UserSkillCreateInput
  ): Promise<UserSkill> {
    return await this.service.createUserSkill({
      data: {
        ...data,

        grade: data.grade
          ? {
              connect: data.grade,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,

        skill: data.skill
          ? {
              connect: data.skill,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        grade: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        skill: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserSkill] })
  @ApiNestedQuery(UserSkillFindManyArgs)
  async userSkills(@common.Req() request: Request): Promise<UserSkill[]> {
    const args = plainToClass(UserSkillFindManyArgs, request.query);
    return this.service.userSkills({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        grade: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        skill: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserSkill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userSkill(
    @common.Param() params: UserSkillWhereUniqueInput
  ): Promise<UserSkill | null> {
    const result = await this.service.userSkill({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        grade: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },

        skill: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserSkill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserSkill(
    @common.Param() params: UserSkillWhereUniqueInput,
    @common.Body() data: UserSkillUpdateInput
  ): Promise<UserSkill | null> {
    try {
      return await this.service.updateUserSkill({
        where: params,
        data: {
          ...data,

          grade: data.grade
            ? {
                connect: data.grade,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,

          skill: data.skill
            ? {
                connect: data.skill,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          grade: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },

          skill: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserSkill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserSkill(
    @common.Param() params: UserSkillWhereUniqueInput
  ): Promise<UserSkill | null> {
    try {
      return await this.service.deleteUserSkill({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          grade: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },

          skill: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
